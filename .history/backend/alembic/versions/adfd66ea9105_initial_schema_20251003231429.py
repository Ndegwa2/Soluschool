"""Initial schema

Revision ID: adfd66ea9105
Revises: 
Create Date: 2025-10-03 23:13:41.786065

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'adfd66ea9105'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=True),
    sa.Column('password_hash', sa.Text(), nullable=False),
    sa.Column('school_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('phone')
    )
    op.create_table('schools',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('admin_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # Add FK to users after schools is created
    op.create_foreign_key('fk_users_school_id', 'users', 'schools', ['school_id'], ['id'])
    op.create_index('idx_users_email', 'users', ['email'], unique=False)
    op.create_index('idx_users_phone', 'users', ['phone'], unique=False)
    op.create_table('children',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('parent_id', sa.Integer(), nullable=False),
    sa.Column('school_id', sa.Integer(), nullable=False),
    sa.Column('grade', sa.String(length=50), nullable=True),
    sa.Column('date_of_birth', sa.Date(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['school_id'], ['schools.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('gates',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('school_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('location', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['school_id'], ['schools.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('notifications',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('sent_at', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('qr_codes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('child_id', sa.Integer(), nullable=True),
    sa.Column('qr_data', sa.Text(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('is_guest', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['child_id'], ['children.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('qr_data')
    )
    op.create_index('idx_qr_codes_user_child', 'qr_codes', ['user_id', 'child_id'], unique=False)
    op.create_table('logs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('qr_id', sa.Integer(), nullable=True),
    sa.Column('gate_id', sa.Integer(), nullable=False),
    sa.Column('scanned_by', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['gate_id'], ['gates.id'], ),
    sa.ForeignKeyConstraint(['qr_id'], ['qr_codes.id'], ),
    sa.ForeignKeyConstraint(['scanned_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_logs_qr', 'logs', ['qr_id'], unique=False)
    op.create_index('idx_logs_timestamp', 'logs', ['timestamp'], unique=False)
    # Add trigger for updated_at
    op.execute("""
    CREATE TRIGGER update_users_updated_at
    AFTER UPDATE ON users
    FOR EACH ROW
    BEGIN
        UPDATE users SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
    END;
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP TRIGGER IF EXISTS update_users_updated_at")
    op.drop_constraint('fk_users_school_id', 'users', type_='foreignkey')
    op.drop_index('idx_logs_timestamp', table_name='logs')
    op.drop_index('idx_logs_qr', table_name='logs')
    op.drop_table('logs')
    op.drop_index('idx_qr_codes_user_child', table_name='qr_codes')
    op.drop_table('qr_codes')
    op.drop_table('notifications')
    op.drop_table('gates')
    op.drop_table('children')
    op.drop_index('idx_users_phone', table_name='users')
    op.drop_index('idx_users_email', table_name='users')
    op.drop_table('users')
    op.drop_table('schools')
    # ### end Alembic commands ###
